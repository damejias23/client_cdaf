/*
Ncdaf_EventExposure

CDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CdafEventNotification Data within a CADF Event Notification request
type CdafEventNotification struct {
	ReportEvent *CdafEventReport `json:"reportEvent,omitempty"`
	EventSubsSyncInfo *CdafEventSubsSyncInfo `json:"eventSubsSyncInfo,omitempty"`
}

// NewCdafEventNotification instantiates a new CdafEventNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdafEventNotification() *CdafEventNotification {
	this := CdafEventNotification{}
	return &this
}

// NewCdafEventNotificationWithDefaults instantiates a new CdafEventNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdafEventNotificationWithDefaults() *CdafEventNotification {
	this := CdafEventNotification{}
	return &this
}

// GetReportEvent returns the ReportEvent field value if set, zero value otherwise.
func (o *CdafEventNotification) GetReportEvent() CdafEventReport {
	if o == nil || o.ReportEvent == nil {
		var ret CdafEventReport
		return ret
	}
	return *o.ReportEvent
}

// GetReportEventOk returns a tuple with the ReportEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdafEventNotification) GetReportEventOk() (*CdafEventReport, bool) {
	if o == nil || o.ReportEvent == nil {
		return nil, false
	}
	return o.ReportEvent, true
}

// HasReportEvent returns a boolean if a field has been set.
func (o *CdafEventNotification) HasReportEvent() bool {
	if o != nil && o.ReportEvent != nil {
		return true
	}

	return false
}

// SetReportEvent gets a reference to the given CdafEventReport and assigns it to the ReportEvent field.
func (o *CdafEventNotification) SetReportEvent(v CdafEventReport) {
	o.ReportEvent = &v
}

// GetEventSubsSyncInfo returns the EventSubsSyncInfo field value if set, zero value otherwise.
func (o *CdafEventNotification) GetEventSubsSyncInfo() CdafEventSubsSyncInfo {
	if o == nil || o.EventSubsSyncInfo == nil {
		var ret CdafEventSubsSyncInfo
		return ret
	}
	return *o.EventSubsSyncInfo
}

// GetEventSubsSyncInfoOk returns a tuple with the EventSubsSyncInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdafEventNotification) GetEventSubsSyncInfoOk() (*CdafEventSubsSyncInfo, bool) {
	if o == nil || o.EventSubsSyncInfo == nil {
		return nil, false
	}
	return o.EventSubsSyncInfo, true
}

// HasEventSubsSyncInfo returns a boolean if a field has been set.
func (o *CdafEventNotification) HasEventSubsSyncInfo() bool {
	if o != nil && o.EventSubsSyncInfo != nil {
		return true
	}

	return false
}

// SetEventSubsSyncInfo gets a reference to the given CdafEventSubsSyncInfo and assigns it to the EventSubsSyncInfo field.
func (o *CdafEventNotification) SetEventSubsSyncInfo(v CdafEventSubsSyncInfo) {
	o.EventSubsSyncInfo = &v
}

func (o CdafEventNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReportEvent != nil {
		toSerialize["reportEvent"] = o.ReportEvent
	}
	if o.EventSubsSyncInfo != nil {
		toSerialize["eventSubsSyncInfo"] = o.EventSubsSyncInfo
	}
	return json.Marshal(toSerialize)
}

type NullableCdafEventNotification struct {
	value *CdafEventNotification
	isSet bool
}

func (v NullableCdafEventNotification) Get() *CdafEventNotification {
	return v.value
}

func (v *NullableCdafEventNotification) Set(val *CdafEventNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableCdafEventNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableCdafEventNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdafEventNotification(val *CdafEventNotification) *NullableCdafEventNotification {
	return &NullableCdafEventNotification{value: val, isSet: true}
}

func (v NullableCdafEventNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdafEventNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


