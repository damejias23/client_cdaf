/*
Ncdaf_EventExposure

CDAF Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdaf

import (
	"encoding/json"
)

// CdafEventSubscription Represents an individual event subscription resource on CDAF
type CdafEventSubscription struct {
	EventRequest CdafEvent `json:"eventRequest"`
	// String providing an URI formatted according to RFC 3986.
	EventNotifyUri string `json:"eventNotifyUri"`
	Options *CdafEventMode `json:"options,omitempty"`
}

// NewCdafEventSubscription instantiates a new CdafEventSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdafEventSubscription(eventRequest CdafEvent, eventNotifyUri string) *CdafEventSubscription {
	this := CdafEventSubscription{}
	this.EventRequest = eventRequest
	this.EventNotifyUri = eventNotifyUri
	return &this
}

// NewCdafEventSubscriptionWithDefaults instantiates a new CdafEventSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdafEventSubscriptionWithDefaults() *CdafEventSubscription {
	this := CdafEventSubscription{}
	return &this
}

// GetEventRequest returns the EventRequest field value
func (o *CdafEventSubscription) GetEventRequest() CdafEvent {
	if o == nil {
		var ret CdafEvent
		return ret
	}

	return o.EventRequest
}

// GetEventRequestOk returns a tuple with the EventRequest field value
// and a boolean to check if the value has been set.
func (o *CdafEventSubscription) GetEventRequestOk() (*CdafEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventRequest, true
}

// SetEventRequest sets field value
func (o *CdafEventSubscription) SetEventRequest(v CdafEvent) {
	o.EventRequest = v
}

// GetEventNotifyUri returns the EventNotifyUri field value
func (o *CdafEventSubscription) GetEventNotifyUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventNotifyUri
}

// GetEventNotifyUriOk returns a tuple with the EventNotifyUri field value
// and a boolean to check if the value has been set.
func (o *CdafEventSubscription) GetEventNotifyUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventNotifyUri, true
}

// SetEventNotifyUri sets field value
func (o *CdafEventSubscription) SetEventNotifyUri(v string) {
	o.EventNotifyUri = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CdafEventSubscription) GetOptions() CdafEventMode {
	if o == nil || o.Options == nil {
		var ret CdafEventMode
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdafEventSubscription) GetOptionsOk() (*CdafEventMode, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CdafEventSubscription) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given CdafEventMode and assigns it to the Options field.
func (o *CdafEventSubscription) SetOptions(v CdafEventMode) {
	o.Options = &v
}

func (o CdafEventSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventRequest"] = o.EventRequest
	}
	if true {
		toSerialize["eventNotifyUri"] = o.EventNotifyUri
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableCdafEventSubscription struct {
	value *CdafEventSubscription
	isSet bool
}

func (v NullableCdafEventSubscription) Get() *CdafEventSubscription {
	return v.value
}

func (v *NullableCdafEventSubscription) Set(val *CdafEventSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableCdafEventSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableCdafEventSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdafEventSubscription(val *CdafEventSubscription) *NullableCdafEventSubscription {
	return &NullableCdafEventSubscription{value: val, isSet: true}
}

func (v NullableCdafEventSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdafEventSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


